import { EventEmitter } from 'events';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Engine extends EventEmitter {
    constructor() {
        super();
        this.continue = () => {
            const _continue = this.continues.shift();
            if (typeof window !== 'undefined' && window.requestIdleCallback) {
                window.requestIdleCallback(_continue);
            }
            else {
                _continue();
            }
        };
        this.getCoroutines = () => {
            return this.coroutine;
        };
        this.coroutine = new Set();
        this.continues = [];
        this.on('add', (cor) => {
            this.coroutine.add(cor);
        });
        this.on('delete', (cor) => {
            this.coroutine.delete(cor);
        });
        this.on('continue', (_continue) => {
            this.continues.push(_continue);
            this.continue();
        });
    }
}
var engine = new Engine();

var Status;
(function (Status) {
    Status["NEW"] = "NEW";
    Status["RUNNING"] = "RUNNING";
    Status["WAITING"] = "WAITING";
    Status["DONE"] = "DONE";
})(Status || (Status = {}));
class Coroutine {
    constructor(coBlock, config) {
        this.start = () => {
            this.run();
        };
        this.run = () => __awaiter(this, void 0, void 0, function* () {
            if (this.status === Status.RUNNING)
                return;
            this.status = Status.RUNNING;
            const sleep = this.sleep;
            const coSwitch = this.coSwitch;
            const park = this.park;
            yield this.coBlock({
                sleep, coSwitch, park
            });
            this.status = Status.DONE;
            engine.emit('delete', this);
        });
        this.coSwitch = () => {
            this.status = Status.WAITING;
            return new Promise(resolve => {
                engine.emit('continue', () => {
                    resolve();
                    this.status = Status.RUNNING;
                });
            });
        };
        this.sleep = (t = 0) => {
            this.status = Status.WAITING;
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve();
                    this.status = Status.RUNNING;
                }, t);
            });
        };
        this.park = () => {
            this.status = Status.WAITING;
            return new Promise(() => { });
        };
        this.status = Status.NEW;
        this.name = config && config.name;
        this.coBlock = coBlock;
        engine.emit('add', this);
        config && config.isStart && this.run();
    }
}
Coroutine.getCoroutines = () => {
    return engine.getCoroutines();
};

export default Coroutine;
export { Coroutine };
//# sourceMappingURL=index.es.js.map
